; (function ($) {

    $.Carousel = function (element, options) {
        if (!element) {
            return false;
        }
        var carousel = this;
        options = options || {};

        var opts = {
            duration: 500,
            index: (options.index - 1) || 0
        }
        console.log(element);
        var $this = $(element);
        if(!$this) {
            console.log(element + ' : no element');
            return;
        }
        var $nav = $this.find('.slideBelt'),
            $navWidth = 0,
            $navAll = $this.siblings('.tab.all'),
            $navItems = $nav.find('.slide'),
            $navItemsWidth = $navItems.filter(':eq(0)').outerWidth(),
            $navButtons = $nav.find('a'),
            $buttons = $this.siblings('.button'),
            $total = $navItems.length,
            $endMargin = 0,
            $direction = '',
            $current = -1,
            $breakPoint = [],
            $breakPointIndex = 0,
            $lastCount = 0,
            $containerWidth = $this.width(),
            $navSlideWidth = 0,
            sum = 0;
        
        carousel.init = function () {
            if(!$this) {
                return;
            }
            this.getBreakPoint();
            $navWidth = $navItemsWidth * $total;
            $nav.css('width', $navWidth);
            $navAll.addClass('selected');
            this.onNav();
            this.onControl();
            
        };
        carousel.getBreakPoint = function() {
            $navItems.each(function (i) {
                var $this = $navButtons.filter(':eq(' + i + ')');
                sum += $navItemsWidth;
                if (sum >= $containerWidth) {
                    var index = ($breakPointIndex === 0) ? i : i - ($breakPointIndex);
                    $breakPoint.push(index);
                    $breakPointIndex++;
                    sum = $navItemsWidth * 2;
                }
                $this.addClass('nowrap');
                if($this[0].scrollHeight > $this[0].offsetHeight) {
                    $this.addClass('multiline');
                }
                $this.removeClass('nowrap');
                $this.attr('data-breakpoint', $breakPointIndex);
            });
            $lastCount = (4 * ($breakPoint.length) - $total);
            $navSlideWidth = ($navItemsWidth) * ($breakPoint[0] - 1);
            $endMargin = -($navSlideWidth * ($breakPointIndex - 1) + ($navItemsWidth * $lastCount));
        }
        carousel.onNav = function () {
            var self = this;
            $navButtons.on('click', function (e) {
                
                if (self.isAnimated()) {
                    return false;
                }
                var index = $navButtons.index($(this));
                if ($current === index) {
                    return false;
                }
                self.selectedNav(index);
                self.unselectedNav($current);
                $current = index;
                carousel.onNavAnimation($current);
                if(options.callback && typeof options.callback == 'function') {
                    if($current == -1) {
                        options.callback($navAll);
                    } else {
                        options.callback($navButtons.filter(':eq(' + $current + ')'));
                    }
                }
                e.preventDefault();
            });
            $navAll.on('click', function(e) {
                if ($current === -1) {
                    return false;
                }
                self.selectedNav(-1);
                self.unselectedNav($current);
                $current = -1;
                carousel.onNavAnimation($current);
                options.callback($navAll);
                e.preventDefault();
            });
        };
        carousel.onControl = function () {
            var self = this;
            $buttons.on('click', function () {
                if (self.isAnimated()) {
                    return false;
                }
                var isBackBtn = $(this).hasClass('buttonSlidePrev');
                if (isBackBtn) {
                    self.onPrevCarousel();
                } else {
                    self.onNextCarousel();
                }
                carousel.onNavAnimation();
            });
        }
        carousel.isAnimated = function () {
            return $nav.is(':animated');
        }
        carousel.getAnimationWidth = function () {
            if ($current < 0) {
                return $endMargin;
            } else if (($direction === '-' && $current === 1) || ($direction === '+' && $current == 0) || ($direction === '-' && $current === $total - 1) || ($direction === '+' && $current == $total - 2)) {
                return 136;
            } else if ($direction === '+' && $current === $total - 1) {
                return $endMargin;
            } else if ($direction === '-' && $current === 0) {
                return 0;
            } else {
                return 360;
            }
        }
        carousel.getDirectAnimationWidth = function (index) {
            if (index === 0) {
                return 0;
            } else if (index < 2) {
                return opts.padding;
            } else if (index > 1 && index < $total - 1) {
                return (opts.width * (index - 1)) + opts.padding;
            } else if (index > 1 && index === $total - 1) {
                return (opts.width * (index - 2)) + (opts.padding * 2);
            }
        }
        carousel.getMargin = function () {
            return parseInt($nav.css('margin-left'), 10);
        }
        carousel.isAtEnd = function () {
            return $current == $total - 1;
        }
        carousel.isAtStart = function () {
            return $current == -1;
        }
        carousel.getBreakPointIndex = function (index) {
            return $.inArray(index, $breakPoint);
        }
        carousel.selectedNav = function (index) {
            if(index == -1) {
                $navAll.addClass('selected');
            } else {
                $navButtons.filter(':eq(' + index + ')').addClass('selected');
            }
        };
        carousel.unselectedNav = function (index) {
            if(index == -1) {
                $navAll.removeClass('selected');
            } else {
                $navButtons.filter(':eq(' + index + ')').removeClass('selected');
            }
            
        };
        carousel.onNavAnimation = function (index) {
            index = index || $current;
            var $margin = 0;
            if ($current === 0 || $current == -1) {
                $breakPointIndex = 0;
                $margin = $navSlideWidth * $breakPointIndex;
            } else if ($current === $total - 1) {
                $breakPointIndex = $navButtons.filter(':eq(' + index + ')').attr('data-breakpoint');
                var $length = $navButtons.filter('[data-breakpoint="'+$breakPointIndex+'"]').length - 1;
                $margin = $length * $navItemsWidth;
                $margin += ($navSlideWidth * ($breakPointIndex - 1));
            } else {
                $breakPointIndex = $navButtons.filter(':eq(' + index + ')').attr('data-breakpoint');
                if ($breakPointIndex == $breakPoint.length) {
                    var $length = $navButtons.filter('[data-breakpoint="'+$breakPointIndex+'"]').length - 1;
                    $margin = $length * $navItemsWidth;
                    $margin += ($navSlideWidth * ($breakPointIndex - 1));
                } else {
                    $margin = $navSlideWidth * $breakPointIndex;
                }
            }
            $nav.stop().animate({
                "margin-left": '-' + $margin + 'px'
            }, opts.duration);

        }
        carousel.onNextCarousel = function () {
            $direction = '-';
            this.unselectedNav($current);
            if(this.isAtEnd()) {
                $current = -1;
            } else {
                $current++;
            }
            this.selectedNav($current);
            if(options.callback && typeof options.callback == 'function') {
                if($current == -1) {
                    options.callback($navAll);
                } else {
                    options.callback($navButtons.filter(':eq(' + $current + ')'));
                }
                
            }
        }
        carousel.onPrevCarousel = function () {
            $direction = '+';
            this.unselectedNav($current);
            $current = this.isAtStart() ? $total - 1 : $current - 1;
            this.selectedNav($current);
            if(options.callback && typeof options.callback == 'function') {
                if($current == -1) {
                    options.callback($navAll);
                } else {
                    options.callback($navButtons.filter(':eq(' + $current + ')'));
                }
            }
        }
        carousel.init();
    }
    $.fn.Carousel = function (options) {
        return this.each(function () {
            if (undefined == $(this).data('Carousel')) {
                var plugin = new $.Carousel(this, options);
                $(this).data('Carousel', plugin);
            }
        });
    }

    $.Tooltip = function(element) {

        if(!element) {
            return false;
        }
        var tooltip = this;

        var $container = $(element),
            $activator = $container.children('.tooltip-activator'),
            $popup = $container.children('.tooltip');
            
            
        tooltip.init = function() {

            $activator.on({
                'click' : function(e) {
                    e.preventDefault();
                },
                'focus mouseover' : function() {
                    $popup.removeClass('hidden');
                },
                'blur mouseout' : function() {
                    $popup.addClass('hidden');
                }
            });

        }

        tooltip.init();

    }

    $.fn.Tooltip = function(options) {
        return this.each(function() {
            if (undefined == $(this).data('Tooltip')) {
                var plugin = new $.Tooltip(this, options);
                $(this).data('Tooltip', plugin);
            }
        });
    }

    var tooltip = $('.tooltip-wrap');

    if(tooltip.length > 0) {
        tooltip.Tooltip();
    }


})(jQuery);