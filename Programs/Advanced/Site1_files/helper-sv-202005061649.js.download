if (!Element.prototype.matches) {
	Element.prototype.matches = 
		Element.prototype.matchesSelector || 
		Element.prototype.mozMatchesSelector ||
		Element.prototype.msMatchesSelector || 
		Element.prototype.oMatchesSelector || 
		Element.prototype.webkitMatchesSelector ||
		function(s) {
			var matches = (this.document || this.ownerDocument).querySelectorAll(s),
				i = matches.length;
			while (--i >= 0 && matches.item(i) !== this) {}
			return i > -1;            
		};
}

if (!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(element) {
		var len = this.length >>> 0;
		var from = Number(arguments[1]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if (from < 0) {
			from += len;
		}
		for (; from < len; from++) {
			if (from in this && this[from] === element) {
				return from;
			}        
		}
		return -1;
	};
}

;(function(Salary) {

	Salary.Lib = function() {
		this.appVersion = (navigator.appVersion || '').toLowerCase();
		this.userAgent = (navigator.userAgent || '').toLowerCase();
	}
	Salary.Lib.prototype = {
		getSystemInfo : function() {
			var os = [
				{ name: 'Windows Phone', value: 'Windows Phone', version: 'OS' },
				{ name: 'Windows', value: 'Win', version: 'NT' },
				{ name: 'iPhone', value: 'iPhone', version: 'OS' },
				{ name: 'iPad', value: 'iPad', version: 'OS' },
				{ name: 'Kindle', value: 'Silk', version: 'Silk' },
				{ name: 'Android', value: 'Android', version: 'Android' },
				{ name: 'PlayBook', value: 'PlayBook', version: 'OS' },
				{ name: 'BlackBerry', value: 'BlackBerry', version: '/' },
				{ name: 'Macintosh', value: 'Mac', version: 'OS X' },
				{ name: 'Linux', value: 'Linux', version: 'rv' },
				{ name: 'Palm', value: 'Palm', version: 'PalmOS' }
			];
			var browser = [
				{ name: 'Chrome', value: 'Chrome', version: 'Chrome' },
				{ name: 'Firefox', value: 'Firefox', version: 'Firefox' },
				{ name: 'Safari', value: 'Safari', version: 'Version' },
				{ name: 'Internet Explorer', value: 'MSIE', version: 'MSIE' },
				{ name: 'Opera', value: 'Opera', version: 'Opera' },
				{ name: 'BlackBerry', value: 'CLDC', version: 'CLDC' },
				{ name: 'Mozilla', value: 'Mozilla', version: 'Mozilla' }
			];
			var header = [
				navigator.platform,
				navigator.userAgent,
				navigator.appVersion,
				navigator.vendor,
				window.opera
			];
			function matchItem(string, data) {
				var i = 0,
					j = 0,
					html = '',
					regex,
					regexv,
					match,
					matches,
					version;				
				for (i = 0; i < data.length; i += 1) {
					regex = new RegExp(data[i].value, 'i');
					match = regex.test(string);
					if (match) {
						regexv = new RegExp(data[i].version + '[- /:;]([\\d._]+)', 'i');
						matches = string.match(regexv);
						version = '';
						if (matches) { if (matches[1]) { matches = matches[1]; } }
						if (matches) {
							matches = matches.split(/[._]+/);
							for (j = 0; j < matches.length; j += 1) {
								if (j === 0) {
									version += matches[j] + '.';
								} else {
									version += matches[j];
								}
							}
						} else {
							version = '0';
						}
						return {
							name: data[i].name,
							version: parseFloat(version)
						};
					}
				}
				return { name: 'unknown', version: 0 };
			}
			var agent = header.join(' ');
			var os = matchItem(agent, os);
			var browser = matchItem(agent, browser);
			return {
				os : os,
				browser : browser
			}
		},
		isIe : function() {
			return (/msie/.test(this.userAgent) || /trident/.test(this.userAgent)) ? true : false;
		},
		getBrowserInfo : function() {
			var userAgent = this.userAgent;
			return userAgent.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
		},
		getBrowserVersion : function() {
			var userAgent = this.userAgent;
			var browserInfo = this.getBrowserInfo();
			if(browserInfo[1] == 'trident') {
				var version = userAgent.substring(userAgent.indexOf('rv:') + 3);
				var trim = version.indexOf(')');
				return parseInt(version.substring(0, trim), 10);
			} else {
				return parseInt(browserInfo[2], 10);
			}
		},
		addEventListener : function(element, event, fn) {
			if(element == null){
				return false;
			}
			if(document.createEventObject){
				element.attachEvent('on' + event, fn);
			} else {
				if(event == 'resize'){
					element = window;
				}
				element.addEventListener(event, fn);
			}
		},
		setAttr : function(element, attr) {
			if(!element) {
				return false;
			}
			for (var idx in attr) {
				if ((idx == 'styles' || idx == 'style') && typeof attr[idx] == 'object') {
					for (var prop in attr[idx]) {
						element.style[prop] = attr[idx][prop];
					}
				} else if (idx == 'html') {
					element.innerHTML = attr[idx];
				} else {
					element.setAttribute(idx, attr[idx]);
				}
			}
		},
		getAttr : function(element, prop) {
			var getProp = [];
			var attr = element.getAttribute(prop);
			if(attr == null) {
				attr = [];
			}
			if(attr.indexOf(" ") != -1) {
				getProp = attr.split(' ');
			} else {
				getProp.push(attr);
			}
	        return getProp;
	    },
		addClass : function(element, className) {
			if('classList' in document.documentElement) {
				element.classList.add(className);
			} else if(!this.hasClass(element, className)) {
				element.className += ' ' + className;							
			}
		},		
		removeClass : function(element, className) {
			if('classList' in document.documentElement) {
				element.classList.remove(className);
			} else {
				element.className = element.className.replace(new RegExp('\\b' + className + '\\b', 'g'), '');
			}
		},
		hasClass : function(element, className) {
			return ('classList' in document.documentElement) ? element.classList.contains(className) : new RegExp('\\b' + className + '\\b').test(element.className);
		},
		toggleClass : function(element, className) {
			if(!element || !className) {
				return false;
			}
			this.hasClass(element, className) ? this.removeClass(element, className) : this.addClass(element, className);
		},
		getChiildNode : function(element, selector) {
			if(!element) {
				return false;
			}
			var elements = [];
			(function loop(element) {				
				var nodes = element.childNodes;
				for(var i = 0, length = nodes.length; i < length; i++) {
					var node = nodes[i];
					if(selector && node.nodeType === 1 && node.nodeName != "#text") {
						if(node.matches(selector)) {
							elements.push(node);
						}
						loop(node);	
					}
				}
				return elements;
			})(element);
			return elements;
		},
		getParentNode : function(element, selector) {
            var nodes = [];
			var element = element;
			while(element.parentNode) {
				var node = element.parentNode;
				if(selector) {
					if(node.matches(selector)) {
						nodes.unshift(node);
						break;
					}
				} else {
					nodes.unshift(node);
				}
				element = node;
			}
			return nodes;
        },
		getOffsetTop : function(element) {
			if(!element) {
				return false;
			}
			var offsetTop = 0;
			do {
				if (!isNaN( element.offsetTop )) {
					offsetTop += element.offsetTop;
				}
			} while ( element = element.offsetParent );
			return offsetTop;
		},
		getOffsetLeft : function(element) {
			var offsetLeft = 0;
			do {
				if (!isNaN( element.offsetLeft )) {
					offsetLeft += element.offsetLeft;
				}
			} while ( element = element.offsetParent );
			return offsetLeft;
		},
		numberWithCommas : function(value) {
			return value.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		},
		getElementText : function(element, callback) {
			// http://jsfiddle.net/webx/ZhLep/
			var textNodes = '';
			var whitespace = /^\s*$/;
			var nodes = element.childNodes;
			if(element) {
				for(var i = 0, length = element.childNodes.length; i < length; i++) {
					var node = nodes[i];
					if (node.nodeName === "#text" && !(whitespace.test(node.nodeValue))) {
						textNodes = node.nodeValue;
						callback(textNodes);
					} else {
						this.getElementText(node, callback);
					}
				}
			}
		},
		getCalculateString : function(str, length) {
			var len = 0;
			var minA = [" ",",",".","'","(",")","!",":",";","-","I"];
			var check = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/;
			var checkE = /[A-Z]/;
			var checkS = /[a-z]/;
			var text = '';
			var s = '';
			for(var i = 0; i < str.length; i++){
				s = str.charAt(i);
				if(minA.indexOf(s) != -1){
					len += 0.35;
				} else {
					if(check.test(s) == true){
						len += 1;
					} else if(checkE.test(s) == true) {
						len += 0.5;
					} else if(checkS.test(s) == true) {
						len += 0.5;
					} else {
						len += 0.4;
					}
				}
				if(length <= len) {
					break;
				} else {
					text += s;
				}
			}
			return text;
		},
		getMax : function(data) {
			var data = data.reduce( function (previous, current) { 
				return previous > current ? previous:current;
			});
			return data;
		},
		triggerEvent : function(element, type) {
			if ('createEvent' in document) {
				var e = document.createEvent('HTMLEvents');
				e.initEvent(type, false, true);
				element.dispatchEvent(e);
			} else {
				var e = document.createEventObject();
				e.eventType = type;
				element.fireEvent('on'+e.eventType, e);
			}
		}
	}
	Salary.lib = new Salary.Lib();
	
}(window.Salary = window.Salary || {}));